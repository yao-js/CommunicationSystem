package main

import (
	"encoding/json"
	"fmt"
	"strconv"

	"github.com/hyperledger/fabric/core/chaincode/shim"
	"github.com/hyperledger/fabric/protos/peer"
)

// Define the Smart Contract structure
type SmartContract struct {
}

// Define the Registration structure, with 6 properties.  Structure tags are used by encoding/json library
type Registration struct {
	// Device Unique ID (adopt hash function to hash device's certificate)
	Uid  string `json:"uid"`
	// Device owner certificate which contains device owner certificate and other needed information
	DeviceOwnerPub  string `json:"deviceOwnerPub"`
	// The signature of device certificate which is signed by device owner ECDSA public key and using ECDSA algorithm
	RPubSign string `json:"rPubSign"`
	// The signature of device certificate which is signed by device owner ECDSA public key and using ECDSA algorithm
	SPubSign string `json:"sPubSign"`
	// The certificate of device generated by device owner using the csr file which generated by device.
	DevicePub string `json:"devicePub"`
	// The ECDH public key of device which is used to create share secret key adopted by ECDH encryption
	DeviceEcdhPub string `json:"deviceEcdhPub"`
}


func (s *SmartContract) Init(APIstub shim.ChaincodeStubInterface) peer.Response {
	return shim.Success(nil)
}

func (s *SmartContract) Invoke(APIstub shim.ChaincodeStubInterface) peer.Response {

	// Retrieve the requested Smart Contract function and arguments
	function, args := APIstub.GetFunctionAndParameters()

	if function == "queryRegistration" {
		return s.queryRegistration(APIstub, args)
	} else if function == "verify" {

		return s.Verify(APIstub, args);
	}

	return shim.Error("Invalid Smart Contract function name.")
}


func (s *SmartContract) queryRegistration(APIstub shim.ChaincodeStubInterface, args []string) peer.Response {

	if len(args) != 1 {
		return shim.Error("Incorrect number of arguments. Expecting 1")
	}
	//根据设备证书的hash值来找相关信息
	registrationAsBytes, _ := APIstub.GetState(args[0])
	return shim.Success(registrationAsBytes)
}

func (s *SmartContract) Verify(APIstub shim.ChaincodeStubInterface, args []string) peer.Response{
	if len(args) != 1 {
		return shim.Error("Incorrect number of arguments. Expecting 1")
	}

	//根据设备证书的hash值来找相关信息
	registrationAsBytes, _ := APIstub.GetState(args[0])
	res := new(Registration)
	err := json.Unmarshal(registrationAsBytes,&res)
	if err != nil{
		return shim.Error("jason type is wrong")
	}

	//利用证书签名以及证书还有设备此持有者的证书进行ECDSA验签算法
	result := EccVerify([]byte(res.DevicePub),[]byte(res.RPubSign),[]byte(res.SPubSign),[]byte(res.DeviceOwnerPub))
	str := strconv.FormatBool(result)
	return shim.Success(str)
}

func main() {

	// Create a new Smart Contract
	err := shim.Start(new(SmartContract))
	if err != nil {
		fmt.Printf("Error creating new Smart Contract: %s", err)
	}
}